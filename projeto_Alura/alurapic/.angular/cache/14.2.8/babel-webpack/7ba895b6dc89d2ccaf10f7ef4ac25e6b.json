{"ast":null,"code":"import { Subscriber } from '../Subscriber';\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\n\nexport function mapTo(value) {\n  return source => source.lift(new MapToOperator(value));\n}\n\nclass MapToOperator {\n  constructor(value) {\n    this.value = value;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nclass MapToSubscriber extends Subscriber {\n  constructor(destination, value) {\n    super(destination);\n    this.value = value;\n  }\n\n  _next(x) {\n    this.destination.next(this.value);\n  }\n\n} //# sourceMappingURL=mapTo.js.map","map":null,"metadata":{},"sourceType":"module"}