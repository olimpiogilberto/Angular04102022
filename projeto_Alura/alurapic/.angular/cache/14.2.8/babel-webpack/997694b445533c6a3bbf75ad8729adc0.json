{"ast":null,"code":"import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\n\nexport function skipUntil(notifier) {\n  return source => source.lift(new SkipUntilOperator(notifier));\n}\n\nclass SkipUntilOperator {\n  constructor(notifier) {\n    this.notifier = notifier;\n  }\n\n  call(destination, source) {\n    return source.subscribe(new SkipUntilSubscriber(destination, this.notifier));\n  }\n\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nclass SkipUntilSubscriber extends OuterSubscriber {\n  constructor(destination, notifier) {\n    super(destination);\n    this.hasValue = false;\n    this.add(this.innerSubscription = subscribeToResult(this, notifier));\n  }\n\n  _next(value) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.hasValue = true;\n    this.innerSubscription.unsubscribe();\n  }\n\n  notifyComplete() {\n    /* do nothing */\n  }\n\n} //# sourceMappingURL=skipUntil.js.map","map":null,"metadata":{},"sourceType":"module"}